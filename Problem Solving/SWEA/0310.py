#카운팅 정렬
# 항목들의 순서를 결정하기 위해 집합에 각 항목이 몇 개씩 있는지 세는 작업을 하여, 선형 시간에 정렬하는 효율적인 알고리즘.
# * 제한사항 - 정수나 정수로 표현할 수 있는 자료에 대해서만 적용 가능: 각 항목의 발생 회수를 기록하기 위해 ,정수 항목으로 인덱스 되는 카운트들의 배열을 사용하기 때문이다.
#            - 카운트들을 위한 충분한 공간을 할당하려면 집합 내의 가장 큰 정수를 알아야 한다.
# * 시간 복잡도 - O(n+k): n은 리스트 길이, k는 정수의 최대값
A=[0,4,1,3,1,2,4,1]
N=len(A) #자료수
K=4      #최대값
C=[0] * (K+1)
B=[]
#1단계
for i in A:
    C[i] += 1
# print(C) #c=[1,3,1,1,2]
#2단계 -> 빈도수 누적
for i in range(K+1):
    B += [i] * C[i]
print(B) #B=[0,1,1,1,2,3,4,4]

'''
def Counting_Sort(A, B, K)
    #A[] -- 입력 배열(1 to K)
    #B[] -- 정렬된 배열
    #C[] -- 카운트 배열.
C = [0] * (K+1)
for i in range(0, len(B)):
    C[A[i]] += 1
for i in range(1, len(C)):
    C[i] += C[i-1]
for i in range(len(B)-1, -1, -1):
    B[C[A[i]]-1] = A[j]
    C[A[i]] -= -1
'''
#완전검색
#완전 검색 방법은 문제의 해법으로 생각할 수 있는 모든 경우의 수를 나열해보고 확인하는 기법이다.
#Brute-force 혹은 generate-and-test 기법이라고도 불리 운다.
#모든 경우의 수를 테스트한 후, 최종 해법을 도출한다.
#일반적으로 경우의 수가 상대적으로 작을 때 유용하다.
#완전검색으로 시작하라
#모든 경우의 수를 생성하고 테스트하기 때문에 수행 속도는 느리지만, 해답을 찾아내지 못할 확률이 작다.
#자격검정평가 등에서 주어진 문제를 풀 때, 우선 완전 검색으로 접근하여 해답을 도출한 후, 성능 개선을 위해 다른 알고리즘을 사용하곻 ㅐ답을 확인하는 것이 바람직하다.
#완전검색 잘하면 백트래킹(가지치기), 동적계산 잘 하게 된다...!
#완전검색을 활용한 baby-gin 접근
#고려할 수 있는 모든 경우의 수 생성하기
#6개의 숫자로 만들 수 있는 모든 숫자 나열(중복 포함) => 6! = 720
#예)입력으로 [2,3,5,7,7,7]을 받았을 경우, 아래와 같이 순열을 생성할 수 있따.
#3개씩 짤라서 판단
#순열을 어떻게 생성할 것인가
#순열
#서로 다른 것들 중 몇 개를 뽑아서 한 줄로 나열하는 것
#서로 다른 n개 중 r개를 택하는 순열은 아래와 같이 표현한다.
#nPr
#그리고 nPr은 다음과 같은 식이 성립한다.
# nPr = n * (n-1) * ... (n-r+1)
#단순하게 순열을 생성하는 방법
#예){1,2,3} 을 포함하는 몯느 순열을 생성하는 함수
#동일한 숫자가 포함되지 않았을 때, 각 자리 수 별로 loop을 이용해 아래와 같이 구현할 수 있다.
'''
for i1 in range(1,4):
    for i2 in range(1,4):
        if i2 != i1:
            for i3 in range(1,4):
            ...
'''
'''
arr = 'ABC'; N = len(arr)
perm = []
visit = [0] * N
for i in range(N):          #첫번째 원소를 선택
    perm.append(arr[i])
    visit[i] = 1
    for j in range(N):      #두번째 원소를 선택
        if visit[j]==0: continue
        perm.append(arr[j]); visit[j]=1
        for k in range(N):  #세번째 원소를 선택
            if visit[k]==0: continue
            perm.append(arr[k]); visit[k]=1

            print(perm)
            perm.pop(); visit[k] = 0
        perm.pop(); visit[j] = 0
    perm.pop(); visit[i] = 0
'''
#탐욕 알고리즘
#탐욕 알고리즘은 최적해를 구하는 데 사용되는 근시안적인 방법
#최적화 문제 = 모든 가능한 경우(후보해)에서 최적해를 찾는 문제
#여러 경우 중 하나를 결정해야 할 때마다 그 순간에 최적이라고 생각되는 것을 선택해 나가는 방식으로 진행하여 최종적인 해답에 도달한다.
#각 선택의 시점에서 이루어지는 결정은 지역적으로는 최적이지만 그 선택들을 계속 수집하여 최종적인 해답을 만들었다고 하여, 그것이 최적이라는 보장은 없다.
#일반적으로, 머릿속에 떠오르는 생각을 검증 없이 바로 구현하면 greedy 접근이 된다.
#탐욕 알고리즘의 동작 과정
#1)해 선택: 현재 상태에서 부분 문제의 최적 해를 구한 뒤, 이를 부분해집합에 추가한다.
#2)실행 가능성 검사: 새로운 부분해 집합이 실행 가능한지를 확인한다. 곧, 문제의 제약 조건을 위반하지 않는지를 검사한다.
#3)해 검사: 새로운 부분해 집합이 문제의 해가 되는지를 확인한다. 아직 전체 문제의 해가 완성되지 않았따면 1)의 해 선택부터 다시 시작한다.
#예)거스름돈
