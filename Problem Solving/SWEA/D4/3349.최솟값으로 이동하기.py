#한국의 모든 구획이 새롭게 재편성되었다.
#정확히 말하면 w개의 남북방향 도로와 H개의 동서방향 도로가 모두 일정한 간격으로 늘어서서 교차하는 바둑판 모양으로 만들어졌따.
#남북방향 도로는 가장 서쪽에 있는 것으로부터 시작해서 동쪽으로 가면서 차례대로 1,2, ..., W로 번호가 매겨지져 있고,
#동서방향 도로는 가장 남쪽에 있는 것으로부터 시작해서 북쪽으로 가면서 차례대로 1,2, ..., H로 번호가 매겨져 있다.
#i번 남북방향 도로와 j번 동서방향 도로가 교차하는 지점을 (i,j)로 나타낸다.
#이렇게 도로를 만들고 나면 아래와 같은 모양이 된다.
#w=4, h=3인 예이다.
#정부는 이런 식으로 도로를 만들면 중간에 사용하지 않는 공간이 너무 많은 것 같아서 북동방향으로 가는 도로도 만들었다.
#즉 (i,j)와 (i-1,j-1)을 연결하는 도로이다.
#이런 도로를 만든 다음에는 아래와 같아질 것이다.
#준환이는 최근에 일이 많아서 N개의 교차로를 순서대로 이동해야 한다.
#i번째로 이동하려는 지점은 (xi, yi)이다.
#정부에서는 교차로에서 다른 교차로로 한번 이동할 때 1만큼의 비용을 내도록 저책을 세웠기 때문에 비용을 줄이기 위한 전략적 계획을 세웠따.
#준환이는 (x1,y1)에서 시작하여 i가 증가하는 순서대로 (xi,yi)들을 차례대로 방문하고 (xN,yN)에 도착하기 위한 비용의 최솟값은 무엇인가.
for tc in range(1, int(input())+1):
    W, H, N = map(int, input().split())

    x, y = map(int, input().split()) #x1, y1

    ans = 0
    for _ in range(N-1):  #N-1개의 좌표를 입력받는다.
        tx, ty = map(int, input().split())
        # x,y ---> tx, ty
        # 최소 거리 계산
        if (x < tx and y > ty) or (x>tx and y<ty):    #좌상우하
            ans += abs(x-tx) + abs(y-ty)
        else:
            ans += max(abs(x-tx), abs(y-ty))
        x, y = tx, ty
    print('#{} {}'.format(tc, ans))